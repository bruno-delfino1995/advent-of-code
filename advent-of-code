#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

DIR=$(realpath "$(dirname "$0")")

cd "$DIR" || exit 1

function show_usage() {
  cat <<EOF
Advent of Code Runner

Usage:
  advent-of-code <puzzle> (--lang <lang>) [...options]
  advent-of-code --setup --lang elixir
  advent-of-code y2015d01p1 --lang rust

Options:
  -h --help         Show this help
  -l --lang=<lang>  Solve the puzzle with language <lang>
  --list            List the available languages or solutions for <lang>
  --new             Create the structure for a new <lang> branch
  --remove          Remove the worktree for the <lang>
  --setup           Setup <lang> for the first time
  --test            Use examples instead of personal puzzle input
EOF
}

function list_languages() {
  local from_local=$(git branch | sed 's/^*//;s/^[[:space:]]*//')
  local from_remote=$(git branch --remotes | sed 's/origin\///g;/->/d')
  local from_worktrees=$(git worktree list | sed 's/.*\[\([^]]*\)\].*/\1/')

  echo -e "$from_local\n$from_worktrees\n$from_remote" \
    | grep -vE "main|HEAD" \
    | sed "s/^[[:space:]]*//;" \
    | sort \
    | uniq

  return 0
}

function list_solutions() {
  local language="$1"

  local dir="$DIR/solutions/$language"

  if [[ ! -d "$dir" ]]; then
    echo "There's no solution using $language"
    echo "Consider starting a new one with --new or setup it with --setup"

    return 1
  fi

  cd "$dir" || return 1
  mise run prepare > /dev/null

  mise run list
}

function create_solver() {
  local language="$1"

  local dir="$DIR/solutions/$language"
  local worktree="$(git worktree list | grep $dir)"

  if [[ ! -d "$dir" ]]; then
    git worktree add --orphan -b "$language" "$dir" > /dev/null
    echo "Worktree created at $dir"

    return 0
  elif [[ -n "$worktree" ]]; then
    echo "There's a worktree in the directory already"
    echo ">  ${worktree#$DIR/}"

    return 0
  else
    echo "$dir isn't empty, and there's no worktree for it"

    return 1
  fi
}

function setup_solver() {
  local language="$1"

  local dir="solutions/$language"
  if [[ ! -d "$dir" ]]; then
    mkdir -p "solutions"
    git worktree add "$dir" "$language"
  fi

  cd "$dir" || return 1
  mise run setup

  return 0
}

function run_solution() {
  local language="$1"
  local puzzle="$2"

  local input=$(cat "$DIR/inputs/$puzzle.txt")

  cd "solutions/$language" || return 1
  mise run prepare > /dev/null

  echo "$input" | mise run solve "$puzzle"
}

function run_test() {
  local language="$1"
  local puzzle="$2"

  local test="$DIR/examples/$puzzle.yaml"

  local input
  local expected
  local actual

  input=$(yq '.input' "$test")
  actual=$(run_solution "$language" "$puzzle" "$input")
  expected=$(yq '.output' "$test")

  if [[ "$actual" == "$expected" ]]; then
    echo "Test passed!!!"

    return 0
  else
    echo -e "Test failed!!!\n"
    echo -e "Expected: \"\"\"\n$expected\n\"\"\""
    echo -e "Actual: \"\"\"\n$actual\n\"\"\""

    return 1
  fi
}

function remove_solver() {
  local language="$1"

  local dir="solutions/$language"

  if [[ ! -d "$dir" ]]; then
    git worktree remove "$dir"
    git branch -d "$language"

    echo "Worktree and branch for $language removed"
    return 0
  else
    echo "There's no worktree for $language"
    return 1
  fi
}

function check_requirements() {
  if ! command -v mise &> /dev/null; then
    echo "mise could not be found"
    exit 1
  fi

  if ! command -v yq &> /dev/null; then
    echo -e "yq could not be found"
    exit 1
  fi
}

check_requirements

POSITIONAL_ARGS=()
LANGUAGE=""
LIST="NO"
TEST="NO"
SETUP="NO"
NEW="NO"
REMOVE="NO"

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_usage
      exit 0
      ;;
    -l|--lang)
      LANGUAGE="$2"
      shift
      shift
      ;;
    --list)
      LIST="YES"
      shift
      ;;
    --new)
      NEW="YES"
      shift
      ;;
    --setup)
      SETUP="YES"
      shift
      ;;
    --test)
      TEST="YES"
      shift
      ;;
    --remove)
      REMOVE="YES"
      shift
      ;;
    -*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}"

if [[ "$LIST" == "YES" ]]; then
  if [[ -z "$LANGUAGE" ]]; then
    list_languages
    exit $?
  fi

  list_solutions "$LANGUAGE"
  exit $?
fi

if [[ -z "$LANGUAGE" ]]; then
  echo -e "You need to provide which language to use\n"

  show_usage
  exit 1
fi

if [[ "$REMOVE" == "YES" ]]; then
  remove_solver "$LANGUAGE"
  exit $?
fi

if [[ "$NEW" == "YES" ]]; then
  create_solver "$LANGUAGE"
  exit $?
fi

if [[ "$SETUP" == "YES" ]]; then
  setup_solver "$LANGUAGE"
  exit $?
fi

if [[ ! -v 1 ]]; then
  echo -e "You need to provide the puzzle to execute\n"

  show_usage
  exit 1
fi

PUZZLE="$1"

if [[ "$TEST" == "YES" ]]; then
  run_test "$LANGUAGE" "$PUZZLE"
  exit $?
fi

run_solution "$LANGUAGE" "$PUZZLE"
