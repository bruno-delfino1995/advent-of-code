#+TITLE: Advent of Code Runner

#+BEGIN_QUOTE
Why use a single language when you could have them all?
#+END_QUOTE

Here, you’ll find the code I’ve used for every problem I managed to solve. As I use a different language every time, there are orphan branches for each language. To manage the solution, I’ve made a simple shell script that uses ~git worktree~ to address the "subrepos" along with ~yq~ to run simple tests.

Since there are multiple inputs for the same problem and I didn’t want to publish mine, the input folder is empty. To include your inputs, you’ll need to put them at ~yYYYYdDDp{1,2}.txt~ - the same path for the tests but with a ~txt~ extension instead. The script then pipes inputs to solutions housed at ~solutions/<lang>~, which come from branches with the language name.

Each language used to solve the challenges must have a basic [[https://mise.jdx.dev/configuration.html][mise config]] with a ~compile~ task to create an executable at ~solutions/<lang>/solver~. That executable must implement two simple commands:

- ~list~: which must output a list of puzzles they can solve, one per line
- ~exec <puzzle>~: to process data from stdin, and present results at stdout

To run the project, all you need is to set your language of choice with ~./advent-of-code --setup -l <lang>~ and then solve the challenges with ~./advent-of-code yYYYYdDDp{1,2} -l lang~.

* Tips

- You can see which languages we have implemented with ~./advent-of-code --list~ and solutions for a specific language with ~./advent-of-code --list -l <lang>~
- To add a new language, you can run ~./advent-of-code --new -l <lang>~. It'll create a new branch and check it out in the solutions folder.
- Whenever developing or focusing on a single language, create a ~.mise.local.toml~ to export the ~LANGUAGE~ variable so you don’t need to use ~-l <lang>~ every time.
